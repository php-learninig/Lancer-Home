<?php declare(strict_types = 1);
/**
 * Created by PhpStorm.
 * User: Anna
 * Date: 22.09.2016
 * Time: 20:58
 */

$arg1 = $_REQUEST['arg1'];
$arg2 = $_REQUEST['arg2'];

$a = 'a';
$b = 'b';
$n = "\n";

$x = 5;
$y = 15;
$z = 123;

$empty = [];

$null = null;

$users = [
    [
        'name' => 'Anna',
        'login' => '2556',
        'roles' => 'Female',
        'years' => '18',
    ],
    [
        'name' => 'Sergei',
        'login' => '155',
        'roles' => 'Male',
        'years' => '24',
    ],
    [
        'name' => 'Vasia',
        'login' => '45',
        'roles' => 'admin',
        'years' => '33',
    ],
    [
        'name' => '28',
        'login' => '79',
        'roles' => 'guest',
        'years' => '90',
    ],
];

///////////////////////////////////////////////////////////////////////////////////

/*if($x > $y) {
    echo '$x';
}
elseif($x < $y) {
    echo '$y';
}
else {
    echo 'равны';
}*/

/*switch($x) {
    case 1:
        echo '$x';
    break;

    case false:
        echo '$y';
    break;

    default:
        echo 'равны';
}*/

/**
 * isset - проверка на существование переменной
 * unset - удаляет переменную
 * empty - проверка переменной на пустоту
 */

/*if(isset($x)) {
    echo '$x is isset!', "\n";
}

unset($x);

if(isset($x)) {
    echo '$xx is isset!';
}
else {
    echo '$x is not isset!';
}*/

/*if(isset($_REQUEST['arg2']) && !empty($_REQUEST['arg2'])) {

    print_r($_REQUEST['arg2']);

}*/

/**
 * напиши функцию которая на вход будет принимать один обязательный аргумент,
 * проверять, если строка, то возвращать длину этой строки,
 * если массив, то возвращать длинну его (количество ключей массива)
 * 1. если $arg - string то 1.1
 *      1.1 return strlen($arg)
 * 2. в противном случае если $arg - array то 2.1
 *      2.1 return count($arg)
 * 3. в противном случае 3.1
 *      3.1 Вернуть сообщение об ошибке
 */

/*function Anna($argument)
{

    if(is_string($argument)) {
        return strlen($argument);
    }

    elseif(is_array($argument)) {
        return count($argument);
    }

    else {
        return 'Osibka';
    }
}*/

/**
 * для того чтобы проверить переменную на тип (строка,массив,число и тд) нужно открыть яндекс и ввести как проверить
 * типпеременной пхп
 */
//echo print_r($array);

//echo Anna('1354');

/**
 * Напиши функцию которая будет на вход принимать два аргумента
 * первый аргумент обязательный, второй необязательный
 * В первом аргументе должна приходить строка (string)
 *      //если это строчка, то продолжаем с этой переменной работать
 *      //в противном случае выбросить исключение с сообщением что это не строчка
 * //Во втором (не обязательном параметре) будет приходить целое число (int)
 * //Если был передан 1 аргумент то вернуть должен что то подобное
 *      Lancer - 6 букв
 * Если было передано два параметра то следующее
 *      Привет Lancer! Тебе 24 года!
 */
/**
 * @param      $name
 * @param null $year
 *
 * @return string
 */
/*function hello($name, $year = null) {

    if(!is_string($name)){
        return print 'Это не строчка';
    }

    if($year === null){
        return print $name . ' - ' . mb_strlen($name). ' букв';
    }

    if(isset($name, $year) && !empty($name) && !empty($year) && is_numeric($year)){
        return print 'Привет ' . $name . ' Тебе ' . $year . ' года!';
    }

    return 'Сбой системы!';
}

hello('Lancer'); // Lancer - 6 букв
hello('Lancer', 24); // Привет Lancer Тебе 24 года!*/

$array = [
    'a1' => [
        'id' => '1',
        'age' => '16',
        'gender' => 'm',
        'login' => 'Вася',
    ],

    'PHONES2' => [
        '1',
        '16',
        'dulti' => [
            'bambi' => 17,
            '0' => null,
            '1' => 1,
            '2' => 4,
            'dimensional' => [
                'array' => 123,
            ],
            '7' => 49,
        ],
        'm',
        'Вася',
    ],

    2 => [
        'a2' => [
            'id' => '2',
            'age' => '18',
            'gender' => 'm',
            'login' => 'Петя',

            'multi' => [
                '0123',
            ],

            'duwlti' => [
                'bambi' => [
                    '17ed' => 'Hello',
                    'PHONES' => 'scd',
                ],
            ],

            'a3' => [
                'id' => '3',
                'age' => '20',
                'gender' => 'g',
                'login' => 'Катя',
            ],

        ],
    ]
];
/*$array[] = [
    'a1' => [
        'id' => '1',
        'age' => '16',
        'gender' => 'm',
        'login' => 'Вася'
    ],

    'phones' => [
        '1',
        '16',
        'dulti' => [
            'bambi' => 17,
            '0' => null,
            '1' => 1,
            '2' => 4,
            "dimensional" => [
                'array' => 123,
            ],
            '7' => 49,

        ],
        'm',
        'Вася'
    ],

    'a2' => [
        'id' => '2',
        'age' => '18',
        "multi" => [
            '0123'
        ],

        'duwlti' => [
            'bambi' => [
                '17ed' => 'Hello'
            ]
        ],

        'gender' => 'm',
        'a3' => [
            'id' => '3',
            'age' => '20',
            'gender' => 'g',
            'login' => 'Катя'
        ],
        'login' => 'Петя'
    ],

];
$array[] = [
    'a1' => [
        'id' => '1',
        'age' => '16',
        'gender' => 'm',
        'login' => 'Вася'
    ],

    'phones' => [
        '1',
        '16',
        'dulti' => [
            'bambi' => 17,
            '0' => null,
            '1' => 1,
            '2' => 4,
            "dimensional" => [
                'array' => 123,
            ],
            '7' => 49,

        ],
        'm',
        'Вася'
    ],

    'a2' => [
        'id' => '2',
        'age' => '18',
        "multi" => [
            '0123'
        ],

        'duwlti' => [
            'bambi' => [
                '17ed' => 'Hello'
            ]
        ],

        'gender' => 'm',
        'a3' => [
            'id' => '3',
            'age' => '20',
            'gender' => 'g',
            'login' => 'Катя'
        ],
        'login' => 'Петя'
    ],

];
$array[] = [
    'a1' => [
        'id' => '1',
        'age' => '16',
        'gender' => 'm',
        'login' => 'Вася'
    ],

    'phones' => [
        '1',
        '16',
        'dulti' => [
            'bambi' => 17,
            '0' => null,
            '1' => 1,
            '2' => 4,
            "dimensional" => [
                'array' => 123,
            ],
            '7' => 49,

        ],
        'm',
        'Вася'
    ],

    'a2' => [
        'id' => '2',
        'age' => '18',
        "multi" => [
            '0123'
        ],

        'duwlti' => [
            'bambi' => [
                '17ed' => 'Hello'
            ]
        ],

        'gender' => 'm',
        'a3' => [
            'id' => '3',
            'age' => '20',
            'gender' => 'g',
            'login' => 'Катя'
        ],
        'login' => 'Петя'
    ],

];*/

/*//print_r($array);
//echo "\n\n";

foreach($array as $key) {

    //print_r( $key );
    //echo "\n";

}

print_r($array['duwlti']['bambi']['17ed']); // Hello*/

// Заполнить массив длины n нулями и единицами, при этом данные значения чередуются, начиная с нуля.
// Cоздать массив из n чисел, каждый элемент которого равен квадрату своего номера.
// Найдите сумму и произведение элементов массива. Реализовать двумя способами: с помощью стандартных функций и без.
// Определите, есть ли в массиве повторяющиеся элементы.
// Поменять местами наибольший и наименьший элементы массива.
// Источник: http://www.itmathrepetitor.ru/zadachi-po-php-cikly-i-massivy/
$keys = [
    'rtee',
    2,
    2,
    3,
    4,
];

$values = [
    0 => 'phone',
    1 => 'year',
    2 => 'daw',
    //'01' => 'year',
    //2 => 'change',
    //3 => 'CASE_UPPER',
    //4 => 'fsd'
];

$values2 = [
    0 => 'phone',
    1 => 'tel'

    //2 => 'CASE_UPPER',
    //3 => 'change',
    //4 => 'r',
    //'01',
];

$values3 = [
    1 => 'phone',
    2 => 'year',
    3 => 'CASE_UPPER',
    4 => 'change',
];

//array_change_key_case($array,CASE_UPPER); // — Меняет регистр всех ключей в массиве
//array_chunk($array, 1); // — Разбивает массив на части
///$c = array_combine($keys, $values); // — Создает новый массив, используя один массив в качестве ключей, а другой в качестве соответствующих значений
///print_r(array_count_values($keys)); // — Подсчитывает количество всех значений массива
///print_r($arr = array_diff_assoc($values, $values2)); // — Вычисляет расхождение массивов с дополнительной проверкой индекса
///print_r($arr = array_diff_key($values, $values2, $values3)); // — Вычисляет расхождение массивов, сравнивая ключи
///print_r(array_diff($values, $values2)); // — Вычислить расхождение массивов

$search_array = [
    'f' => 1,
    'second' => '4'
];

//print_r($array[2]['a2']['duwlti']['bambi']);
//
//if(array_key_exists('PHONES', $array[2]['a2']['duwlti'])) {
//    echo 'Yes';
//} else {
//    echo 'Off';
//}

///array_key_exists('key', $array);// — Проверяет, присутствует ли в массиве указанный ключ или индекс
$arr = [
    'user_1',
];

$arr2 = [
    'user_4',
    'user_5',
    'user_6',
];
/** Очередь (Queue) */
//array_push($arr, 'new_user_2'); // — Добавляет один или несколько элементов в конец массива
//array_push($arr, 'new_user_3'); // — Добавляет один или несколько элементов в конец массива
//echo array_shift($arr), "\n"; // — Извлекает первый элемент массива
//array_push($arr, 'new_user_4');
//array_push($arr, 'new_user_5');
//echo array_shift($arr), "\n";
//echo array_shift($arr), "\n";
//echo array_shift($arr), "\n\n\n";


/** Стек (Stack) */
echo array_unshift($arr, 'new_user_2'); // — Добавляет один или несколько элементов в начало массива
echo array_pop($arr), "\n"; // — Извлекает последний элемент массива

echo in_array('new_user_2', $arr, true); // — Проверяет, присутствует ли в массиве значение
print_r($arr);
$arrint = [
    1 => '01',
    2 => '02',
    3 => '03',
    4 => '04',
    5 => '05',
];
print_r($arrint);
$arrint = array_reverse($arrint); // — Возвращает массив с элементами в обратном порядке
print_r($arrint);
//$_ = array_merge($search_array, $array[2]['a2']['duwlti']); // — Сливает один или большее количество массивов
//echo count($_); // — Подсчитывает количество элементов массива или что-то в объекте
//array_merge_recursive(); // — Рекурсивное слияние двух или более массивов
//array_intersect(); // — Вычисляет схождение массивов
//array_keys(); // — Возвращает все или некоторое подмножество ключей массива
//array_multisort(); // — Сортирует несколько массивов или многомерные массивы
//array_rand(); // — Выбирает одно или несколько случайных значений из массива
//array_replace(); // — Замена элементов массива элементами других переданных массивов
//array_search(); // — Осуществляет поиск данного значения в массиве и возвращает ключ первого найденого элемента в
//array_unique(); // — Убирает повторяющиеся значения из массива
//array_values(); // — Выбирает все значения массива
//arsort(); // — Сортирует массив в обратном порядке, сохраняя ключи
//asort(); // — Сортирует массив, сохраняя ключи
//compact(); // — Создает массив, содержащий названия переменных и их значения
//key_exists(); // — Псевдоним array_key_exists
//key(); // — Выбирает ключ из массива
//krsort(); // — Сортирует массив по ключам в обратном порядке
//ksort(); // — Сортирует массив по ключам
//list(); // — Присваивает переменным из списка значения подобно массиву
//rsort(); // — Сортирует массив в обратном порядке
//shuffle(); // — Перемешивает массив
//sort(); // — Сортирует массив

# array_fill_keys(); // — Создает массив и заполняет его значениями, с определенными ключами
# array_fill(); // — Заполняет массив значениями
# array_flip(); // — Меняет местами ключи с их значениями в массиве
# array_intersect_assoc(); // — Вычисляет схождение массивов с дополнительной проверкой индекса
# array_intersect_key(); // — Вычислить пересечение массивов, сравнивая ключи
# array_pad(); // — Дополнить размер массива определенным значением до заданной величины
# array_product(); // — Вычислить произведение значений массива
// случае удачи
# array_slice(); // — Выбирает срез массива
# array_splice(); // — Удаляет часть массива и заменяет её чем-нибудь ещё
# array_sum(); // — Вычисляет сумму значений массива
# array_walk(); // — Применяет заданную пользователем функцию к каждому элементу массива
#current(); // — Возвращает текущий элемент массива
#each(); // — Возвращает текущую пару ключ/значение из массива и смещает его указатель
#end(); // — Устанавливает внутренний указатель массива на его последний элемент
# extract(); // — Импортирует переменные из массива в текущую таблицу символов
# natsort(); // — Сортирует массив, используя алгоритм "natural order"
# next(); // — Передвигает внутренний указатель массива на одну позицию вперёд
# pos(); // — Псевдоним current
# prev(); // — Передвигает внутренний указатель массива на одну позицию назад
# range(); // — Создает массив, содержащий диапазон элементов
# reset(); // — Устанавливает внутренний указатель массива на его первый элемент
# sizeof(); // — Псевдоним count