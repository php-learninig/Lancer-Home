-- Sql Document Create by Lancer

# При созданиии таблицы в ней должна быть хоть одна строчка
# BD_name.table_name
# CASCADE - Если есть две связанные таблицы, то при удалении одной, автоматически удаляется и другая (связанная таблица)
# RESTRICT - Если есть две связанные таблицы, то при удалении одной, другая (связанная таблица) не удаляется
# Если удалить несуществующую запись - ошибки не будет
# OFFSET 10 - пропуск 10 строк

-- Посмотреть все БД --
SHOW DATABASES;


-- Создание БД `firstdb` --
CREATE DATABASE `firstdb` ;


-- Создание таблицы `items` --
CREATE TABLE `table_name` (
    `id` int NOT NULL auto_increment,
    `title` varchar(255) NOT NULL default '',
    `description` varchar(255) NOT NULL default '',
    `content` text,
    `autor` varchar(50) NOT NULL default '',
    `pubdate` timestamp NOT NULL default '',
    PRIMARY KEY (`id`)
);


-- ------------Выбрать все поля из таблицы `table` --
SELECT * FROM `table_name`;


-- VARCHAR(5) - ("abcdeg" -> "abcde") 5 символов --
VARCHAR(5);


-- ENUM - это радиокнопка (одно из нескольких значений) (максимальное значение - >65`000) --
ENUM('Мужчина','Женщина');


-- SET - это чекбокс (несколько из нескольких значений =) )(максимальное значение - 64 элемента) --
SET("Один","Два","Пять") NOT NULL;


-- Создать базу данныйх testdb Если ее не существует --
CREATE DATABASE IF NOT EXISTS `testdb`;


-- Удалить базу данныйх testdb Если она существует --
DROP DATABASE IF EXISTS `testdb`;


-- Удалить таблицу/таблицы данныйх testdb Если она существует --
DROP DATABASE IF EXISTS `testdb`;


-- Создание временной таблицы (созданная на время сессии) --
CREATE TEMPORARY TABLE `table_name`;


-- Создание таблицы на основе SELECT --
CREATE TABLE `table_name`
SELECT `user`,`password`,`host`
FROM `mysql.user`;


-- Создание таблицы по структуре (LIKE - по шаблону) --
CREATE TABLE `table_name_2`
LIKE `table_name`;


-- Изменить тип данных колонки user на VARCHAR(50) --
ALTER TABLE `table_name` # Выбираем таблицу с которой хотим работать
MODIFY `user` VARCHAR(50); # Изменяем тип данных колонки `user` на VARCHAR(50)


-- Переименование таблицы --
ALTER TABLE `table_name` # Выбираем таблицу с которой хотим работать
RENAME `table_new_name`; # Задаем таблице новое имя


-- Добавление новой колонки `admin` между колонками `password` и `host` с типом ENUM('Y','N') --
ALTER TABLE `table_name` # Выбираем таблицу с которой хотим работать
ADD COLUMN `admin` ENUM('Y','N') # Вставляем новую колонку `admin` с типом данных ENUM со значениями "Y" и "N"
DEFAULT 'N' # Cо значением по умолчанию "N"
AFTER `password`; # AFTER - После колонки `password`, FIRST - перед колонкой


-- Добавление новых данных в таблицу --
INSERT INTO `table_name` VALUES ('col_1','col_2','col_3','col_4','col_5','col_6','');

################################################################################################
-- Очистить всю таблицу --
DELETE FROM `table_name`;


-- Удалить определенную запись в таблице(с условием) --
DELETE FROM `table_name`
WHERE `id` = 5; # Где `id` равен 5


-- Удалить определенную запись в таблице(с ограничителем на одну запись) --
DELETE FROM `table_name`
ORDER BY `id` DESC # DESC - Сортировать по `id` в обратном порядке ( ASC - по порядку(по умолчанию) )
LIMIT 1; # Только одну запись


-- Удалить несколько записей подряд в таблице(последовательно) --
DELETE FROM `table_name`
WHERE id >= 20 AND id < 30; # Удалит записи начиная с 20(включительно) и до 30(не включительно)
################################################################################################


-- Изменить значение --
UPDATE `table_name`
SET # ГДЕ...
    col_1 = CONCAT(col_1, '*'), # Взять значение из колонки col_1 и приконтактенировать ей *
    col_2 = col_2 * 2.5 # Взять значение из колонки col_2 и умножить это значение на 2.5
WHERE `id` BETWEEN 10 AND 30; # Где `id` находится в диапазоне от 10(включительно) до 30(включительно)


################################################################################################
SET GLOBAL EVENT_SCHEDULER = ON; # Включение планировщика событий
SET @@GLOBAL.event_scheduler = 1; # Синоним для строчки выше (хочешь так, а хочешь так)


################################################################################################


-- Найти поля, у которых id = 1, 45 и 78  --
SELECT `id`
FROM `table_name`
WHERE `id` IN (1,45,78); # WHERE `id`=1 or `id`=45 or `id`=78

################################################################################################
# AVG() - Узнать среднее значение по всей колонке (только с числами!)
# COUNT() - Считает количество, сколько записей попадает под наше условие
# GROUP_CONCAT() -
# MIN() - Минимальное значение в списке
# MAX() - Максимальное значение в списке
# STD() - Что то связанное с матиматикой (средне квадратичное уровнение)
# SUM() - Сумма всех значений (только с числами!)
# VARIANCE() - см. STD()

-- Выбрать среднее значение --
SELECT AVG(col_price) FROM `table_name`; # Узнать среднюю цену


-- Считаем количество выбранных элементов --
SELECT COUNT(name)

--  --


--  --


--  --


################################################################################################
