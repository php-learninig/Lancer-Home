* {
    *: inherit
}

/* Значение наследуется у родителя */
* {
    *: initial
}

/* Значение определяется браузером */
p {
    text-indent: 20px; /* Красная строка 20 пикселей (можно в %) */

    text-transform: capitalize; /* Каждая первая буква каждого слова - заглавная */
    text-transform: uppercase; /* Все буквы переводим в верхний регистр */
    text-transform: lowercase; /* Все буквы переводим в нижний регистр */

    letter-spacing: 5px; /* Растояние между буквами */
    word-spacing: 5px; /* растояние между словами */

    vertical-align: sub; /* Нижний индекс */
    vertical-align: super; /* Верхний индекс (в квадрате|кубе) */

    line-height: 10%; /* Межстрочный интервал */
    white-space: pre; /* Обернет элемент в <pre> */
    white-space: nowarp; /* не переносить предложения на новую строчку после пробелов */
}

img {
    background-attachment: fixed; /* Фиксированая картинка на экране, не двигается при скроле */
    visibility: hidden; /* Элемент становится поностью прозрачным и продолжает учавствовать в форматировании страницы */
}

ul {
    list-style-type: none; /* Убирает маркеры */
    list-style-position: inside; /* маркер обтекается текстом */
    list-style-image: url('point.gif'); /* Использовать свой маркер */
}

div {
    box-shadow: inset 1px 1px 1px #666;
}

/* Inset - внутренняя тень */

div {
    background-attachment: fixed;
}

/* Фоновая картинка фиксирована по отношению окна браузера */
div {
    background-origin: padding-box;
}

/* Бэкграунд начинает заполнятся с падинга */
div {
    background-origin: border-box;
}

/* Бэкграунд начинает заполнятся с рамки */
div {
    background-origin: content-box;
}

/* Бэкграунд начинает заполнятся с контента */

/* Псевдокласы */
div:empty {
    background: #f60;
}

/* Если Div пустой закрасить его */
div:target {
    background: #cff
}

/* Div красится после перехода по ключевому id в браузерной строке через .../#id */
input:enabled {
    color: green
}

/* Если поле заполнено - красим в зеленый */
input:disabled {
    color: red
}

/* Если форма пустая - красим в красный */

/*-----------FLEX-----------*/
.flexParrent {

    display: flex; /* Обязательный флекс атрибут родителя (Элемент как блок) */
    display: inline-flex; /* Обязательный флекс атрибут родителя (Элемент как строка) */

    justify-content: flex-start; /* Элементы выравниваются от начала главной оси (значение по умолчанию) */
    justify-content: flex-end; /* Элементы выравниваются от конца главной оси */
    justify-content: center; /* Элементы выравниваются по центру главной оси */
    justify-content: space-between; /* Элементы выравниваются по главной оси, распределяя свободное место между собой */
    justify-content: space-around; /* Элементы выравниваются по главной оси, распределяя свободное место вокруг себя */

    flex-direction: row; /* Напрвление элементов с лева на право → по x направление основной оси (Значение по умолчанию) */
    flex-direction: row-reverse; /* Меняет по x направление основной оси, ← с права на лево */
    flex-direction: column; /* Меняет по y направление основной оси, ↓ с верху вниз */
    flex-direction: column-reverse; /* Меняет по y направление основной оси, ↑ с низу в верх  */

    flex-wrap: nowrap; /* Если элементы не помещаются в доль основной оси - сжимать их (Значение по умолчанию) */
    flex-wrap: wrap; /* Если элементы не помещаются в доль основной оси - переносить их*/
    flex-wrap: wrap-reverse; /* === переносить их и перенесенные реверсировать по поперечной оси */

    flex-flow: row nowrap; /* Сокращение двух свойств flex-direction,flex-wrap */

    /* align-items используется только для одной строки! (Если flex-wrap:nowrap)*/
    align-items: stretch; /* Растянет элементы вдоль поперечной оси (для колонок одинаковой высоты)(Значение по умолчанию) (нужно удалить выссоту у дочерних элементов)*/
    align-items: flex-start; /* Выравнивание элементов относительно поперечной оси, элементы прижаты к началу поперечной оси */
    align-items: flex-end; /* Элементы прижаты к концу поперечной оси */
    align-items: center; /* Элементы прижаты к центру поперечной оси */
    align-items: baseline; /* Выравнивает текст у дочерних элементов по базовой линии */

    /* align-content используется для множества строк */
    align-content: stretch; /* Выравнивает строки как есть (значение по умолчанию) */
    align-content: flex-start; /* Выравнивание элементов относительно поперечной оси, элементы прижаты к началу поперечной оси */
    align-content: flex-end; /* Элементы прижаты к концу поперечной оси */
    align-content: center; /* Элементы прижаты к центру поперечной оси */
    align-content: space-between; /* Элементы выравниваются по поперечной оси, распределяя свободное место между собой */
    align-content: space-around; /* Элементы выравниваются по поперечной оси, распределяя свободное место вокруг себя */

}

.flexChild {
    order: i+ +; /* Нумерация построения элементов (нумерованые элементы будут выстраиваться после не нумерованых) */
    flex-shrink: 0; /* Игнорирует изменение размера при flex-wrap:nowrap(когда елементы вокруг уменьшают свой размер чтобы вместиться) */
    flex-grow: 1; /* Заполняет все оставшееся место на строке */
    flex-basis: auto |(width | height); /* Указывает исходный главный размер flex-элемента */
    flex: auto | none | 0 1 auto; /* Это свойство – сокращённая запись для свойств flex-grow, flex-shrink и flex-basis. Наряду с другими значениями, его можно установить также в auto (1 1 auto) и none (0 0 auto). */
}
